# resolve <sup>[![Version Badge][2]][1]</sup>

implements the [node `require.resolve()` algorithm](https://nodejs.org/api/modules.html#modules_all_together) such that you can `require.resolve()` on behalf of a file asynchronously and synchronously

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![dependency status][5]][6]
[![dev dependency status][7]][8]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][11]][1]

# example

asynchronously resolve:

```js
var resolve = require('resolve/async'); // or, require('resolve')
resolve('tap', { basedir: __dirname }, function (err, res) {
    if (err) console.error(err);
    else console.log(res);
});
```

```
$ node example/async.js
/home/substack/projects/node-resolve/node_modules/tap/lib/main.js
```

synchronously resolve:

```js
var resolve = require('resolve/sync'); // or, `require('resolve').sync
var res = resolve('tap', { basedir: __dirname });
console.log(res);
```

```
$ node example/sync.js
/home/substack/projects/node-resolve/node_modules/tap/lib/main.js
```

# methods

```js
var resolve = require('resolve');
var async = require('resolve/async');
var sync = require('resolve/sync');
```

For both the synchronous and asynchronous methods, errors may have any of the following `err.code` values:

- `MODULE_NOT_FOUND`: the given path string (`id`) could not be resolved to a module
- `INVALID_BASEDIR`: the specified `opts.basedir` doesn't exist, or is not a directory
- `INVALID_PACKAGE_MAIN`: a `package.json` was encountered with an invalid `main` property (eg. not a string)

## resolve(id, opts={}, cb)

Asynchronously resolve the module path string `id` into `cb(err, res [, pkg])`, where `pkg` (if defined) is the data from `package.json`.

options are:

* opts.basedir - directory to begin resolving from

* opts.package - `package.json` data applicable to the module being loaded

* opts.extensions - array of file extensions to search in order

* opts.includeCoreModules - set to `false` to exclude node core modules (e.g. `fs`) from the search

* opts.readFile - how to read files asynchronously

* opts.isFile - function to asynchronously test whether a file exists

* opts.isDirectory - function to asynchronously test whether a file exists and is a directory

* opts.realpath - function to asynchronously resolve a potential symlink to its real path

* `opts.readPackage(readFile, pkgfile, cb)` - function to asynchronously read and parse a package.json file
  * readFile - the passed `opts.readFile` or `fs.readFile` if not specified
  * pkgfile - path to package.json
  * cb - callback

* `opts.packageFilter(pkg, pkgfile, dir)` - transform the parsed package.json contents before looking at the "main" field
  * pkg - package data
  * pkgfile - path to package.json
  * dir - directory that contains package.json

* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package
  * pkg - package data
  * path - the path being resolved
  * relativePath - the path relative from the package.json location
  * returns - a relative path that will be joined from the package.json location

* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)

  For advanced users, `paths` can also be a `opts.paths(request, start, opts)` function
    * request - the import specifier being resolved
    * start - lookup path
    * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution
    * opts - the resolution options

* `opts.packageIterator(request, start, opts)` - return the list of candidate paths where the packages sources may be found (probably don't use this)
    * request - the import specifier being resolved
    * start - lookup path
    * getPackageCandidates - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution
    * opts - the resolution options

* opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `"node_modules"`

* opts.preserveSymlinks - if true, doesn't resolve `basedir` to real path before resolving.
This is the way Node resolves dependencies when executed with the [--preserve-symlinks](https://nodejs.org/api/all.html#cli_preserve_symlinks) flag.
**Note:** this property is currently `true` by default but it will be changed to
`false` in the next major version because *Node's resolution algorithm does not preserve symlinks by default*.

default `opts` values:

```js
{
    paths: [],
    basedir: __dirname,
    extensions: ['.js'],
    includeCoreModules: true,
    readFile: fs.readFile,
    isFile: function isFile(file, cb) {
        fs.stat(file, function (err, stat) {
            if (!err) {
                return cb(null, stat.isFile() || stat.isFIFO());
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
            return cb(err);
        });
    },
    isDirectory: function isDirectory(dir, cb) {
        fs.stat(dir, function (err, stat) {
            if (!err) {
                return cb(null, stat.isDirectory());
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
            return cb(err);
        });
    },
    realpath: function realpath(file, cb) {
        var realpath = typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;
        realpath(file, function (realPathErr, realPath) {
            if (realPathErr && realPathErr.code !== 'ENOENT') cb(realPathErr);
            else cb(null, realPathErr ? file : realPath);
        });
    },
    readPackage: function defaultReadPackage(readFile, pkgfile, cb) {
        readFile(pkgfile, function (readFileErr, body) {
            if (readFileErr) cb(readFileErr);
            else {
                try {
                    var pkg = JSON.parse(body);
                    cb(null, pkg);
                } catch (jsonErr) {
                    cb(null);
                }
            }
        });
    },
    moduleDirectory: 'node_modules',
    preserveSymlinks: true
}
```

## resolve.sync(id, opts)

Synchronously resolve the module path string `id`, returning the result and
throwing an error when `id` can't be resolved.

options are:

* opts.basedir - directory to begin resolving from

* opts.extensions - array of file extensions to search in order

* opts.includeCoreModules - set to `false` to exclude node core modules (e.g. `fs`) from the search

* opts.readFileSync - how to read files synchronously

* opts.isFile - function to synchronously test whether a file exists

* opts.isDirectory - function to synchronously test whether a file exists and is a directory

* opts.realpathSync - function to synchronously resolve a potential symlink to its real path

* `opts.readPackageSync(readFileSync, pkgfile)` - function to synchronously read and parse a package.json file
  * readFileSync - the passed `opts.readFileSync` or `fs.readFileSync` if not specified
  * pkgfile - path to package.json

* `opts.packageFilter(pkg, dir)` - transform the parsed package.json contents before looking at the "main" field
  * pkg - package data
  * dir - directory that contains package.json (Note: the second argument will change to "pkgfile" in v2)

* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package
  * pkg - package data
  * path - the path being resolved
  * relativePath - the path relative from the package.json location
  * returns - a relative path that will be joined from the package.json location

* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)

  For advanced users, `paths` can also be a `opts.paths(request, start, opts)` function
    * request - the import specifier being resolved
    * start - lookup path
    * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution
    * opts - the resolution options

* `opts.packageIterator(request, start, opts)`MAMê4  §ß¶´ò∏öª∏®öª∏´∫∏´∏õ©∏ßô™∏™™âáà©ò∏à®∑àòô∏®†∏∫™ª ∞
∏™ ∏ª∞π´ π´	®ª	ª 	∑ ∏   	  	∑ ∫®†∞©®∞ ™ π 
∫ 	õ              ∞y 
     á¢    †ß
∑   †v∞®   õêá†ö´ê∞öÄà	à † öÄáπx†õ Äpá©óª  ÄÄáπ®ª∞ †Äóòõª∞	 Äê       ∞                    h˜Oâ==Ì;û≠¶äSlîTS	æÈçˆø ∫fN·°®›Ôâ∫gIﬁóT˚∂M•ßıÏç:ëAE5=3ÜÂµõÔﬁˆõÉ‡¡ÉÆ=C|¯Ë–à†1¡ÏØ/vqgtvÔ‡‚—ÅO7&Á·IVÑŒéRÂ¿xˆÅèqPP@Ñ‚Aƒ]ﬂôQ‡#y‘é5®¥øÿú;ª0w√
‰M‹W »>Ù£Xv¯¬Å·ˆ:‚Mƒ†ü¿≈™Ï°vt·X·âˆÅï2†‚  j˚ÁÉ˘ÑzX5òlê_È≥#™Û¶
∞ATÍŒoÈcıï±\ºŸTU™Ó∂≥£…Î/"ÄÙ™‹d4ú$††‚
˜Ÿ—¿kKﬂ®tíhíù•®T>v‰}òAÌ Tø…§H¯›j>•†T¶œ2®.†ï[ÌŸÚ>ˆ†P	æMgGT‘\h∞W:»>m<†B †‰ú6K ™#∏§≥àˆ8úï:…AZ0
*1<zú/eë˜ˆR{ÿ`<_∫¢ä·Qø<®ë7m¡‡bƒ/∂@ò2– !¸bÏe«/ë cà¨`]b,êÖ`6⁄j6∞∑‡¿ 7É‹øË/ êÄqïI P¿ò5‡°†ÇT‹› ƒÏ¿XH@ºî ∞&
81H¡*
XX‡»0Am∂X#àb$hú`ú'ã≥·InàBX&†4n»Ô6‹‚ E€bå€8‹Ç ±$WP¿–‰<EK‡Œ0ë†	ÇMpb ¿
HpqàËWXq‡
XÜ£bÄw(		√M@ÇæÖH*¿BÚ+\n ∫G9≠  JXö ÿ'≠§Ç`¨,pdòÄ6É⁄l-∏p¡¿ 7¡Ô∫:r$C,.„,ô’@H!§7: ê…íi‘†ÄÎ»B√`† 
U¥ÿ ¿øEÅ)TY–Ç ‘r¡ ∫/ÿ‰ †[»å^  
S®Z¡
ÇXÃÿ@¡r∫ ‡Å}dòÑA%
ZXÃÇÄµ∞®.∏vA ΩL†»Ü∏Å†∞ÅÅ–HJúô –.0PÇÃpÄ–:¯ø≥ ∞®ÙÅ"kqàJ"'‰@RO,óπ Ä]ÏrÄ–:_…	>J0\Ç Z^¿ ¢*0ÃÄ∞@>H>P>∞;‡|ÄwAÔﬂ¥H>KYûŒx/$q∆~!Ô6‡‚®G„ó«QÒõ≥–mPoÅ0ãÄnÄ7"qy\–`Oã\„∑a%z’Ä!¿¶P¥ÇÄlp‡@œì%P2¡†\`‡ 
S®Z¡
ÇXÃµÄ∞®∏@.‡ª@‡ÇÙ≤Ä@¡TØ`Æê|¥ºÄ¿∫‡ÙÇÄD±l„®LBè’\Ë=¢jÙà
v—#QÆäU¯Ë#äL—=¢‘¢GDµ,zG‘—¢zDT-¢GDŸzè(UCË¢l=#*x—=¢™–#>≥‰¯7–¢1¯@7Òªå$‡j%ê,Ä	Ml÷ÄÑÇA
RV∞∏ ≤	Ãö*¬5HöÄ∏£$%J,Ä	Ml÷ÄàÅA*
V{‡ ¡o~Ä(Ë6„m3∂Å‰Ä–?¢ë`ó»òÅb§P7»Ë`º^ê–ÅG2P˘4‘‡ßRHÄ5¡Î
@T@`™\	âó-ê‡/C ¶∞~f@–
ÇWƒ¥`®Ä-–˜Aÿ Wº/±Äx1Œc‘o F"ä‰úd,~l··Ò\!÷C»Üà¡∂"A3†∞ÅfdòA%2^¿`
U/»≥@ >ì.–…¡ft$8"„A%	.-ê‡Äuú¥b ê
ÉU∑p	¶ó\pâÉL¡)¯É¢P¥Ç‡hÕ¿7`ÌÇ,¸®…ì®Aì_j`46PÃâôUpƒÄÔÉﬁæ’àDgh±e?S∏Ö1∞/¨~T`6\p¿ÅÅ.veæ8Å)xxÅ∆ß√/Ò¡ã!x3ò~Ø†»Ëº`êÅ^–ö(Ç"DM3ÊÃòM¿"D¡Á™8'7Ä9Q!ƒ|ûZ—˛
ˆèÿ ‘‹Ä p]†ÇAzY@< ‹ËiÄ®¡Nxê	f„$%ÕA¯ÂFsG¯Ø0åhπ†Ä]`dòƒA%`ò˛`Å(^5`7/êå
`5 p9âj¬§·%Ùƒ¥`®Ä-–ÿ@¡‡√ä» 	®ó\êâ.\p¿Å>¯> < x¡·[Õli ¡w›€%Ï1˛D>I¬æD9qÙ®ñﬂÈYÜCg∂ÇA62 äMivõF§Ji˘ü6;fd¥ö…¯¢÷¯‰`˛k:q…∑M´‚K˘’€ç±¶Mˆvßìåöd•Ù¯Il%ùíS≈ß*x• ÆH>T*T®p’j6…ìT·⁄]™¡Üjr‘∞·Q¬úr˙\ì^x·Qa»˙®ö<„ÔRx™1_6=Ä\VYáq”Ò—`NÇ¬Ñ†?˝Üü i=`@ËijîQ±>ap-öÇ“ÁWàPÍ	T2ˇpL‹_dÿ¸r‹*§ ÔT2Tyz«¡1;zTÖ2Q˝˙ûya˛«`–‚®hßﬂë£q⁄aTv√É°Â≈œNéπÍûÑ≥É->©#åö‡í∑8r¨ê<ä]õñÊG
:õ’ÆòEÇ@iò*5R,Åq<ÜX±APÜy∏àˇeŒ°ÊqJ4é`“ﬂŒî6e«U Ó%8–Ø∞DY◊ºDGî4¶ßXíì+c∆@¢A˛πYZèNÈ…ÿÑÄaê¶4ÊèL\D«S√≈qvh‚PÄ≤·`∞◊æÆ»` úÖA„`®´Êõ_ÿ¸a˛≈oR	ÜaŸÎ}ú™?ΩJÆ¶h¯	fÆß\å·'ºbc'Tø◊dí®¯E!Â1B:%üUEyTùçOC#¡c<M2jè¡Njaî»SLcÔpu–F9ú3~Qüø?I<ÛãæË√?%ã7ˆ¯¶Ô†ØíDˇëGz®ìÃˇÚE ÑØyÕ˙óñ¡Ë1°7+ﬂrQﬁ“öˇOü5Œlë?ëGô2)À€ÛI˛ÆƒU≥Nß
?‚Õ]'ÉÖ)[≥Î"éºN	àH≈ôJ¬Ÿ˚ÛbãlÈø5$‹!É{è±˜4[çﬁñ4™¶`\Õ¡HˇQÎØ
3ÙN3ëïwÊ?6"XQuΩ:5®sB$(8#ô◊*•""""""~" Ä                                                                                                                                                       ov-url]: https://app.codecov.io/gh/browserify/resolve/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/browserify/resolve
[actions-url]: https://github.com/browserify/resolve/actions
